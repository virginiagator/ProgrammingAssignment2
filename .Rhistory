SOURCE("cachematrix.R")
source("cachematrix.R")
pmatrix <- cachematrix(matrix(1:16), nrow=4, ncol=4)
pmatrix <- cachematrix.R(matrix(1:16), nrow=4, ncol=4)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
pmatrix <- cachematrix.R(matrix(1:16), nrow=4, ncol=4)
pmatrix <- cachematrix(matrix(1:16), nrow=4, ncol=4)
pmatrix <- cachematrix(matrix(1:16, nrow=4, ncol=4)
pmatrix <- cachematrix(matrix(1:16, nrow=4, ncol=4))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
pmatrix <- cachematrix(matrix(1:16, nrow=4, ncol=4))
pmatrix <- makeCachematrix(matrix(1:16, nrow=4, ncol=4))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() {X}
setInverse <- function(inverse) {inv <<- inverse}
getInverse <<- function () {inv}
list(set = set, get = get, setInverse = setInverse, getInvese = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source("cachematrix.R")
pmatrix <- makecacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix <- cacheMatrix(matrix(1:16, nrow=4, ncol=4))
source("cachematrix.R")
pmatrix <- cacheMatrix(matrix(1:16, nrow=4, ncol=4))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() {X}
setInverse <- function(inverse) {inv <<- inverse}
getInverse <<- function () {inv}
list(set = set, get = get, setInverse = setInverse, getInvese = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() {X}
setInverse <- function(inverse) {inv <<- inverse}
getInverse <<- function () {inv}
list(set = set, get = get, setInverse = setInverse, getInvese = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() {X}
setInverse <- function(inverse) {inv <<- inverse}
getInverse <<- function () {inv}
list(set = set, get = get, setInverse = setInverse, getInvese = getInverse)
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
pmatrix <- makecacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix$get()
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix
pmatrix$get()
cacheSolve(pmatrix)
pmatrix <- makeCacheMatrix(matrix(1:4), nrow=2, nocl=2))
pmatrix <- makeCacheMatrix(matrix(1:4, nrow=2, nocl=2))
pmatrix$get()
pmatrix
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
